{"map":"{\"version\":3,\"sources\":[\"/Users/shuangxiao/Documents/GitHub/monsters-rolodex/src/components/card/card.component.jsx\",\"/Users/shuangxiao/Documents/GitHub/monsters-rolodex/src/components/card-list/card-list.component.jsx\",\"/Users/shuangxiao/Documents/GitHub/monsters-rolodex/src/components/search-box/search-box.component.jsx\",\"/Users/shuangxiao/Documents/GitHub/monsters-rolodex/src/App.js\",\"/Users/shuangxiao/Documents/GitHub/monsters-rolodex/src/serviceWorker.js\",\"/Users/shuangxiao/Documents/GitHub/monsters-rolodex/src/index.js\"],\"names\":[\"Card\",\"props\",\"react_default\",\"a\",\"createElement\",\"className\",\"alt\",\"src\",\"concat\",\"monster\",\"id\",\"name\",\"email\",\"CardList\",\"monsters\",\"map\",\"card_component_Card\",\"key\",\"SearchBox\",\"_ref\",\"placeholder\",\"handleChange\",\"type\",\"onChange\",\"App\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"e\",\"setState\",\"searchField\",\"target\",\"value\",\"state\",\"_this2\",\"fetch\",\"then\",\"response\",\"json\",\"users\",\"_this$state\",\"fileteredMonsters\",\"filter\",\"toLowerCase\",\"includes\",\"search_box_component_SearchBox\",\"card_list_component_CardList\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"oTAIaA,SAAO,SAAAC,GAEhB,OACAC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,kBACZH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAMQ,QAAQC,GAAxC,4BACrBR,EAAAC,EAAAC,cAAA,KAAA,KAAA,IAAOH,EAAMQ,QAAQE,KAArB,KACAT,EAAAC,EAAAC,cAAA,IAAA,KAAA,IAAKH,EAAMQ,QAAQG,MAAnB,QCHKC,SAAW,SAACZ,GAErB,OACAC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,aAEXJ,EAAMa,SAASC,IAAI,SAAAN,GAAO,OAC1BP,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKR,EAAQC,GAAID,QAASA,SCT3BS,SAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAaC,EAAhBF,EAAgBE,aAAhB,OACrBnB,EAAAC,EAAAC,cAAA,QAAA,CACAkB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCwCCG,qBAxCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcJP,aAAe,SAACW,GACdP,EAAKQ,SACH,CAACC,YAAcF,EAAEG,OAAOC,SAfxBX,EAAKY,MAAM,CACTvB,SAAU,GACVoB,YAAa,IAJJT,mFASI,IAAAa,EAAAV,KACjBW,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAACnB,SAAS6B,uCASnC,IAAAC,EAC4BhB,KAAKS,MAA/BvB,EADF8B,EACE9B,SAAUoB,EADZU,EACYV,YACZW,EAAoB/B,EAASgC,OAAO,SAAArC,GAAO,OAC/CA,EAAQE,KAAKoC,cAAcC,SAASd,EAAYa,iBAEhD,OACA7C,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,KAAA,KAAA,yBACDF,EAAAC,EAAAC,cAAC6C,EAAD,CACA7B,YAAc,kBACdC,aAAgBO,KAAKP,eAEpBnB,EAAAC,EAAAC,cAAC8C,EAAD,CAAUpC,SAAU+B,YAlCRM,EAAAA,YCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react';\\n\\nimport './card.styles.css'\\n\\nexport const Card = props => {\\n    //console.log (props.monster.id);\\n    return(\\n    <div className='card-container' >\\n       <img alt=\\\"monster\\\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\\n        <h2 > {props.monster.name } </h2>\\n        <p> {props.monster.email} </p>\\n    </div>\\n    )\\n};\",\"import React from 'react';\\n\\nimport {Card} from '../card/card.component';\\n\\nimport './card-list.styles.css';\\n\\n\\nexport const CardList = (props) => {\\n    //console.log(props);\\n    return (\\n    <div className='card-list'> \\n    {\\n        props.monsters.map(monster => (\\n        <Card key={monster.id} monster={monster} />\\n        ))\\n      }\\n     \\n   </div>\\n);\\n}\\n\",\"import React from 'react';\\n\\nimport './search-box.styles.css';\\n\\nexport const SearchBox = ({ placeholder, handleChange}) => (\\n    <input \\n    type='search' \\n    placeholder={placeholder}  \\n    onChange={handleChange}\\n    />\\n)\",\"import React, {Component } from 'react';\\n\\nimport { CardList } from './components/card-list/card-list.component';\\nimport { SearchBox } from './components/search-box/search-box.component';\\n//import { SearchBox } from './components/search-box/search-box.component';\\nimport './App.css'\\n\\nclass App extends Component {\\n  constructor(){\\n    super();\\n    this.state={\\n      monsters: [],\\n      searchField: ''\\n  };\\n  //this.handleChange = this.handleChange.bind(this);\\n}\\n//componentDidMount put into DOM \\ncomponentDidMount(){\\n  fetch('https://jsonplaceholder.typicode.com/users')\\n    .then(response=> response.json())\\n    .then(users => this.setState({monsters:users}));\\n}\\n\\nhandleChange = (e) => {\\n  this.setState(\\n    {searchField : e.target.value}\\n     );\\n}\\n\\nrender(){\\n  const { monsters, searchField } = this.state;\\n  const fileteredMonsters = monsters.filter(monster => \\n    monster.name.toLowerCase().includes(searchField.toLowerCase())\\n    );\\n    return ( \\n    <div className='App'>\\n      <h1> My Monsters Rolodex </h1>\\n     <SearchBox \\n     placeholder = 'search monsters' \\n     handleChange = {this.handleChange}\\n     />\\n      <CardList monsters={fileteredMonsters} >\\n      </CardList> \\n    </div>\\n    )\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,,,,,function(e,t,n){e.exports=n(19)},,,,,,function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),o=n(2),c=n.n(o),s=(n(14),n(3)),i=n(4),l=n(6),u=n(5),h=n(7),m=(n(15),function(e){return r.a.createElement(\"div\",{className:\"card-container\"},r.a.createElement(\"img\",{alt:\"monster\",src:\"https://robohash.org/\".concat(e.monster.id,\"?set=set2&size=180x180\")}),r.a.createElement(\"h2\",null,\" \",e.monster.name,\" \"),r.a.createElement(\"p\",null,\" \",e.monster.email,\" \"))}),d=(n(16),function(e){return r.a.createElement(\"div\",{className:\"card-list\"},e.monsters.map(function(e){return r.a.createElement(m,{key:e.id,monster:e})}))}),f=(n(17),function(e){var t=e.placeholder,n=e.handleChange;return r.a.createElement(\"input\",{type:\"search\",placeholder:t,onChange:n})}),p=(n(18),function(e){function t(){var e;return Object(s.a)(this,t),(e=Object(l.a)(this,Object(u.a)(t).call(this))).handleChange=function(t){e.setState({searchField:t.target.value})},e.state={monsters:[],searchField:\"\"},e}return Object(h.a)(t,e),Object(i.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;fetch(\"https://jsonplaceholder.typicode.com/users\").then(function(e){return e.json()}).then(function(t){return e.setState({monsters:t})})}},{key:\"render\",value:function(){var e=this.state,t=e.monsters,n=e.searchField,a=t.filter(function(e){return e.name.toLowerCase().includes(n.toLowerCase())});return r.a.createElement(\"div\",{className:\"App\"},r.a.createElement(\"h1\",null,\" My Monsters Rolodex \"),r.a.createElement(f,{placeholder:\"search monsters\",handleChange:this.handleChange}),r.a.createElement(d,{monsters:a}))}}]),t}(a.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(r.a.createElement(p,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}],[[8,1,2]]]);","extractedComments":[]}